{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBACzBD,SAASC,cAAc,UAEzC,IAAII,EAAU,KACVC,EAAU,GACV,EAAe,EACfC,EAAM,EACNC,EAAa,EAqBjB,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,KAAEA,EAAIC,OAAEA,GAAWP,EACzB,GAAe,EACdC,GAAM,EAEH,IAAeM,GAAYC,cAChBT,GAEf,MAAMU,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,CAACC,EAASC,KAChCL,EACFI,IAEAC,OAIIC,MAAKC,GAAWC,EAAA1B,GAAS2B,OAAOF,QAAQ,uBAAqBf,QAAYC,SAAiBiB,OAAOC,GAAUH,EAAA1B,GAAQ2B,OAACG,QAAO,sBAASpB,QAA2BC,SAEpJ,IAAf,IAAqBA,GACbI,GAvCdb,EAAK6B,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJxB,EAAU,CACRK,MAAOoB,OAAO7B,EAAW8B,OACzBpB,KAAMmB,OAAO5B,EAAU6B,OACvBnB,OAAQkB,OAAO3B,EAAY4B,QAE7B,MAAMrB,MAAEA,EAAKC,KAAEA,GAASN,EAExBE,EAAaG,EAEQsB,YAAW,KAC9B5B,EAAU6B,YAAYzB,EAAeG,EAAML,EAAKC,KAC/CG","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nconst form = document.querySelector('form')\nconst inputDelay = document.querySelector('input[name = delay]');\nconst inputStep = document.querySelector('input[name = step]');\nconst inputAmount = document.querySelector('input[name = amount]');\nconst btnSubmit = document.querySelector('button');\n\nlet timerId = null;\nlet options = {};\nlet quantityСounter = 0;\nlet pos = 0;\nlet finalDelay = 0;\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n\n  options = {\n    delay: Number(inputDelay.value),\n    step: Number(inputStep.value),\n    amount: Number(inputAmount.value)\n  };\n  const { delay, step } = options;\n\n  finalDelay = delay;\n\n  const firstDelayId = setTimeout(() => {\n    timerId = setInterval(createPromise, step, pos, finalDelay);\n  }, delay)\n}\n\nfunction createPromise(position, delay) {\n  const { step, amount } = options;\n  quantityСounter += 1;\n  pos += 1;\n\n  if (quantityСounter === amount) {\n    clearInterval(timerId);\n  }\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve();\n    } else {\n      reject();\n  }\n  })\n\n  promise.then(success => Notiflix.Notify.success(`✅ Fulfilled promise ${pos} in ${finalDelay}ms`)).catch(error => Notiflix.Notify.failure(`❌ Rejected promise ${pos} in ${finalDelay}ms`));\n\n  if (quantityСounter !== 1) {\n    finalDelay += step;\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$timerId","$47d4ff9957288465$var$options","$47d4ff9957288465$var$pos","$47d4ff9957288465$var$finalDelay","$47d4ff9957288465$var$createPromise","position","delay","step","amount","clearInterval","shouldResolve","Math","random","Promise","resolve","reject","then","success","$parcel$interopDefault","Notify","catch","error","failure","addEventListener","evt","preventDefault","Number","value","setTimeout","setInterval"],"version":3,"file":"03-promises.88c4ebee.js.map"}